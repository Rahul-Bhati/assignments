/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const uuid = require("uuid");
const fs = require('fs');

const app = express();

let todoDB = [
  {
    "id": 1,
    "title": "this is todo 1",
    "description": "todo msg 1"
  },
  {
    "id": 2,
    "title": "this is todo 2",
    "description": "todo msg 2"
  },
  {
    "id": 3,
    "title": "this is todo 3",
    "description": "todo msg 3"
  },
];
app.use(bodyParser.json());

app.get("/", (req, res) => {
  console.log(uuid.v1());
  res.send("<a href='/todos'>all todos</a>")
})

// retrive all totdo
app.get("/todos", (req, res) => {
  fs.readFile("./todos.json", "utf-8", (err, data) => {
    if (err) res.status(400).json({ msg: err });
    console.log(typeof JSON.parse(data))
    res.status(200).json(JSON.parse(data));
  })
});

// retrive specific totdo
app.get("/todos/:id", (req, res) => {
  const id = req.params.id;
  fs.readFile("./todos.json", "utf-8", (err, data) => {
    if (err) res.status(400).json({ msg: err });
    console.log(typeof JSON.parse(data))
    todoDB = JSON.parse(data);
    res.status(200).json(todoDB.filter((ele) => {
      if (ele.id == id) return ele;
    }));
  })

});

// add new todo
app.post("/todos", (req, res) => {
  req.body.id = uuid.v4();
  // const { title, description } = req.body;
  fs.readFile("./todos.json", "utf-8", (err, data) => {
    if (err) res.status(400).json({ msg: err });
    todoDB = JSON.parse(data);
    todoDB.push(req.body);
    console.log(JSON.stringify(todoDB))
    fs.writeFile('./todos.json', JSON.stringify(todoDB), (err, data1) => {
      if (err) return;
      console.log(data1)
      res.status(201).json(data1);
    })
  })
});

// update todo
app.put("/todos/:id", (req, res) => {
  const id = req.params.id;
  const { title, description } = req.body;

  fs.readFile("./todos.json", "utf-8", (err, data) => {
    if (err) res.status(400).json({ msg: err });
    todoDB = JSON.parse(data);
    todoDB.map((ele) => {
      if (ele.id == id) {
        ele.title = title;
        ele.description = description;
      };
    })
    fs.writeFile('./todos.json', JSON.stringify(todoDB), (err, data1) => {
      if (err) return;
      console.log(data1)
      res.status(200).json(data1);
    })
  })

});

// delete todo
app.delete("/todos/:id", (req, res) => {
  const id = req.params.id;
  fs.readFile("./todos.json", "utf-8", (err, data) => {
    if (err) res.status(400).json({ msg: err });
    todoDB = JSON.parse(data);
    todoDB = todoDB.filter((ele) => {
      if (ele.id != id) return ele;
    })
    fs.writeFile('./todos.json', JSON.stringify(todoDB), (err, data1) => {
      if (err) return;
      console.log(data1)
      res.status(200).json(data1);
    })
  })
});

module.exports = app;
app.listen(3000);